<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ysp.smdemo.dao.mappers.IUserMapper">

    <sql id="table">
        user
    </sql>

    <sql id="fields">
        `id`
        ,`username`
        ,`email`
        ,`password`
        ,`created_ts`
        ,`updated_ts`
    </sql>

    <resultMap id="userRm" type="User">
        <result property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="createdTs" column="created_ts"/>
        <result property="updatedTs" column="updated_ts"/>
    </resultMap>

    <insert id="insert" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
        <include refid="table"/>
        (
        `username`
        ,`password`
        ,`email`
        ,`created_ts`
        )
        VALUES
        (
        #{username}
        ,#{password}
        ,#{email}
        ,#{createdTs}
        );
    </insert>

    <insert id="insertBatch" parameterType="list" useGeneratedKeys="true"
            keyProperty="id">
        <selectKey resultType="long" keyProperty="id" order="BEFORE">
            SELECT
            LAST_INSERT_ID()
        </selectKey>
        INSERT INTO
        <include refid="table"/>
        (
        `username`
        ,`password`
        ,`email`
        ,`created_ts`
        )
        VALUES
        <foreach collection="list" item="item" index="index"
                 separator=",">
            (
            #{item.username}
            ,#{item.password}
            ,#{item.email}
            ,#{item.createdTs})
        </foreach>
    </insert>

    <select id="selectOne" resultMap="userRm" parameterType="map">
        SELECT
        <include refid="fields"/>
        FROM
        <include refid="table"/>
        <where>
            <if test="id != null">id = #{id}</if>
            <if test="username != null">AND username = #{username}</if>
            <if test="password != null">AND password = #{password}</if>
            <if test="email != null">AND email = #{email}</if>
        </where>
        LIMIT 0,1;
    </select>

    <select id="count" resultType="_long" parameterType="map">
        SELECT
        COUNT(*)
        FROM
        <include refid="table"/>
        <where>
            <if test="username != null">username LIKE CONCAT('%',#{username},'%')</if>
        </where>
    </select>

    <select id="select" resultMap="userRm" parameterType="map">
        SELECT
        <include refid="fields"/>
        FROM
        <include refid="table"/>
        <where>
            <if test="username != null">username LIKE CONCAT('%',#{username},'%')</if>
        </where>
        <if test="offset!=null">
            LIMIT #{offset},#{limit}
        </if>
    </select>

    <update id="update" parameterType="User">
        UPDATE
        <include refid="table"/>
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="password != null">password = #{password},</if>
            <if test="email != null">email = #{email}</if>
        </set>
        <where>
            <if test="id !=null">id = #{id}</if>
        </where>
        ;
    </update>

    <delete id="delete" parameterType="map">
        DELETE FROM
        <include refid="table"/>
        <where>
            <if test="id != null">id = #{id}</if>
        </where>
        ;
    </delete>

    <!-- 根据 ID 删除 -->
    <delete id="deleteById" parameterType="_long">
        DELETE FROM
        <include refid="table"/>
        <where>
            <if test="value != null">id = #{id}</if>
        </where>
        ;
    </delete>

</mapper>